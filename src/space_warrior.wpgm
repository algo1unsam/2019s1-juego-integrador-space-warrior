import wollok.game.*
import nave.*
import enemigos.*
import enemigosMalos.*
import disparo.*
import otrosDisparos.*
import niveles.*

program space_warrior {
	game.title("SpaceWarrior")
	game.height(12)
	game.width(14)
	game.ground("ground.png")
	game.addVisual(nave)
	game.say(nave, "PRESIONA LA BARRA ESPACIADORA PARA COMENZAR!")
	const enemigos = []
//--------------------------------------------------------------------------------------------------------------------

	const enemigosEnPantalla = { nivel =>
		enemigos.addAll(nivel.enemigos())
		console.println(enemigos)
		enemigos.forEach{ enemigo => game.addVisual(enemigo)}
		enemigos.forEach{ enemigo => game.hideAttributes(enemigo)}
	}

	const colisiones = { =>
		const jugadores = []
		jugadores.addAll(enemigos)
		jugadores.add(nave)
		jugadores.forEach{ jugador => game.whenCollideDo(jugador, { disparo => disparo.impactar(jugador)})}
	}
	const movimientoNave = { =>
		keyboard.left().onPressDo{
			if (nave.position().x() > 0) 
				nave.position(nave.position().left(1))
		}
		keyboard.right().onPressDo{ 
			if (nave.position().x() < game.width() - 1) 
				nave.position(nave.position().right(1))
		}
		keyboard.up().onPressDo{ nave.disparoInicial()}
	}
	const perderJuego = { => game.onTick(1000, "perderJuego", { =>
		if (nave.estaMuerto()) {
			nave.finDelJuego()
		}
	}) }
	const accionesNave = { =>
		movimientoNave.apply()
		colisiones.apply()
		perderJuego.apply()
	}
	const pasarDeNivel = { =>
		game.clear()
		game.addVisual(nave)
		nave.subirNivel()
		if (nave.nivel() < 4) {
			game.say(nave, "NIVEL" + nave.nivel())
		}
	}
	const accionesEnemigos = { segs_desplazamiento , segs_disparos =>
		game.onTick(segs_desplazamiento, "comenzarDesplazamiento", { => enemigos.forEach{ enemigo => enemigo.desplazarse()}})
		game.onTick(segs_disparos, "comenzarDisparos", { => enemigos.forEach{ enemigo => enemigo.disparoInicial()}})
		game.onTick(200, "quitarEnemigosMuertos", { => enemigos.removeAllSuchThat{ enemigo => enemigo.estaMuerto()}})
	}
	
//--------------------------------------------------------------------------------------------------------------------

	enemigosEnPantalla.apply(nivel1)
	keyboard.space().onPressDo{ 
		accionesEnemigos.apply(6000, 5000)
		accionesNave.apply()
		
		game.onTick(1000, "pasarANivel2", {=>
			if (nave.nivel() == 1 and (nave.muertes() == 6)) {
				pasarDeNivel.apply()
				enemigosEnPantalla.apply(nivel2)
				accionesNave.apply()
				accionesEnemigos.apply(5500, 5500)
				pasarANivel3.apply()
			}
		})
	}
	const pasarANivel3 = {=> game.onTick(1000, "pasarANivel3", {=>
		if (nave.nivel() == 2 and (nave.muertes() == 5)) {
			pasarDeNivel.apply()
			enemigosEnPantalla.apply(nivel3)
			accionesNave.apply()
			accionesEnemigos.apply(4000, 4000)
			//nivel3.apply()
			finDelJuego.apply()
		}
	}) }
	
	
	
	const finDelJuego = {=> game.onTick(2000, "finDelJuego", {=>
		if (nave.nivel() == 3 and (nave.muertes() == 3)) {			
			pasarDeNivel.apply()
			game.say(nave, "GANASTE")
			game.say(nave, "CHAU!")
			nave.finDelJuego()
		}
	}) }
	
	const nivelFinal = {=> game.onTick(30000, "sumarEnemigos", {=>
		//enemigos.add(new EnemigoMalo(position = game.at(6, 11), posiciones = 1, msegs = 950))
		//enemigosEnPantalla.apply()
	}
	
	)
	}
		
	
	game.errorReporter(nave)
	game.start()
}

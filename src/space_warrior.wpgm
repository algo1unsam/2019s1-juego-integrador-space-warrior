import wollok.game.*
import nave.*
import enemigos.*
import enemigosMalos.*
import disparo.*
import otrosDisparos.*
import niveles.*

program space_warrior {
	game.title("SpaceWarrior")
	game.height(12)
	game.width(14)
	game.ground("ground.png")
	game.addVisual(nave)
	game.say(nave, "PRESIONA LA BARRA ESPACIADORA PARA COMENZAR!")
	var nivelActual = nivel3

	const pasarDeNivel = { nivel =>
		game.clear()
		game.addVisual(nave)
		setearNivel.apply(nivel)
	}
	
	const accionesEnemigos = { nivel =>
			const enemigos = []
			const jugadores = []
			enemigos.addAll(nivel.enemigos())
			jugadores.addAll(enemigos)
			jugadores.add(nave)
			enemigos.forEach{ enemigo => game.addVisual(enemigo)}
			enemigos.forEach{ enemigo => game.hideAttributes(enemigo)}
			enemigos.forEach{ enemigo => enemigo.aumentarVida(nivel)} // corregir este metodo, ahora trae siempre el mismo valor
			game.onTick(nivel.velocidadDesplazamiento(), "comenzarDesplazamiento", { => enemigos.forEach{ enemigo => enemigo.desplazarse()}})
			game.onTick(nivel.velocidadDisparo(), "comenzarDisparos", { => enemigos.forEach{ enemigo => enemigo.disparoInicial()}})
			jugadores.forEach{ jugador => game.whenCollideDo(jugador, { disparo => disparo.impactar(jugador)})}
			game.onTick(100, "quitarEnemigosMuertos", { => enemigos.removeAllSuchThat{ enemigo => enemigo.estaMuerto()}})
			game.onTick(20000, "agregarDificultad", { => nivel.agregarDificultad()})
		}	
	
	
	const setearNivel = { nivel =>
		
//Movimiento de la nave-------------------------------------------------------------------------------------------------		
		keyboard.left().onPressDo{ if (nave.position().x() > 0) nave.position(nave.position().left(1))}
		keyboard.right().onPressDo{ if (nave.position().x() < game.width() - 1) nave.position(nave.position().right(1))}
		keyboard.up().onPressDo{ nave.disparoInicial()}			
//----------------------------------------------------------------------------------------------------------------------		
		if (nivel == ganarJuego) {nave.finDelJuego()}
		game.say(nave, nivel.nombreDelNivel())
		nave.subirNivel()
		accionesEnemigos.apply(nivel)
		game.onTick(2000, "proximoNivel", { =>
			if (nivel.nivelCompleto()) {
				nivelActual = nivel.proximoNivel()
				pasarDeNivel.apply(nivelActual)
			}
		})
	}	







	keyboard.space().onPressDo{ 	
		
		setearNivel.apply(nivelActual)
	}
	
	game.errorReporter(nave)
	game.start()
}

import disparo.*
import nave.*
import enemigos.*
import wollok.game.*

describe "Tests del disparo"{
	
	const enemigo = new Enemigo()
	const disparoN = new Disparo(position = nave.position().up(1))
	const disparoE = new Disparo(position = enemigo.position().down(1))
	
fixture {
	game.addVisual(enemigo)
	game.addVisual(nave)
	game.addVisual(disparoN)
	game.addVisual(disparoE)
}

test "Disparo de la nave avanza correctamente" {

	disparoN.desplazarse(nave)
	disparoN.desplazarse(nave)
	disparoN.desplazarse(nave)

	assert.equals(nave.position().up(4), disparoN.position())

}


test "Disparo del enemigo avanza correctamente (con valor de posiciones=2 default)" {

	disparoE.desplazarse(enemigo)
	disparoE.desplazarse(enemigo)
	disparoE.desplazarse(enemigo)
	
	assert.equals(enemigo.position().down(7), disparoE.position())

}

test "Disparo del enemigo avanza correctamente (con valor de posiciones=1)" {

	enemigo.posiciones(1)
	disparoE.desplazarse(enemigo)
	disparoE.desplazarse(enemigo)
	disparoE.desplazarse(enemigo)
	
	assert.equals(enemigo.position().down(4), disparoE.position())

}


test "Disparo del enemigo impacta la nave"{
	
	disparoE.avanzarEnTablero(enemigo, 8000)
	disparoE.impactar(nave)
	
	assert.equals(10, nave.vida())
	
}

test "Disparo de la nave impacta al enemigo"{
	
	disparoN.avanzarEnTablero(nave, 8000)
	disparoN.impactar(enemigo)
	
	assert.equals(15, enemigo.vida())
	
}

test "Disparo de la nave no impacta y es eliminado del tablero"{
	
	disparoN.avanzarEnTablero(nave, 8000)
	
	assert.that(game.removeTickEvent("avanzarEnTablero" + disparoN.identity()))

}


test "Disparo del enemigo no impacta y es eliminado del tablero"{
	
	disparoE.avanzarEnTablero(nave, 8000)
	
	assert.that(game.removeTickEvent("avanzarEnTablero" + disparoE.identity()))
	
}


}


